import React, {Component} from 'react';
import './App.css';
import {makepuzzle} from 'sudoku-rnplay';
import 'bootstrap/dist/css/bootstrap.css';
import {generateMatrix,solve, GenerateGrid} from './helper.js';

//All helper functions are placed in helper.js
class App extends Component {
  constructor(props) {
    super(props)
    this.state = {
      rows: 9,
      columns: 9,
      grid: [],
      matrix: []
    }
  }
  //Function that generates grid and matrix
  puzzle_grid_generator() {
    const {rows,columns} = this.state
    const puzzle = makepuzzle();
    let grid = GenerateGrid(rows,columns,0,puzzle)
    let matrix = generateMatrix(grid);
    this.setState({grid,matrix});
  }

  //Component call puzzle_grid_generator method when it gets mounted
  componentDidMount() {
    this.puzzle_grid_generator()
  }

  //Handles Click event generated by Solve button (It's the starting point where backtracking starts)
  handleClick(matrix) {
    for(let y=0; y<9 ; y++) {
      for(let x = 0; x<9; x++) {
        if(matrix[y][x]==null) {
          for(let n = 0; n < 9; n++) {
            if(solve(matrix,y,x,n)) {
              let grid = this.state.grid
              grid[9*y+x].value = n
              this.setState({grid})
              
              matrix[y][x] = n;
              if(this.handleClick(matrix)) {
                return true
              }
              grid[9*y+x].value = null
              this.setState({grid})
              matrix[y][x] = null
            }
          }
          return false;
        }
      }
    }
    return true;   
  }
  render() { 
    let {matrix} = this.state;
    const gridItems = this.state.grid.map((grid) => {
      //If grid value is null display nothing , else display number
      if(grid.value!== null) {
        return <div 
        key={grid.row.toString() + '.' + grid.columns.toString()} 
        className="grid-item" >
          <h2>{grid.value}</h2>
        </div>
      }
      else{
        return <div 
        key={grid.row.toString() + '.' + grid.columns.toString()} 
        className="grid-item" >
        </div>
      }
  })
    return (
      <div className="App">
        <h1> Sudoku solver </h1>
        <p> Sudoku Solved - In seconds</p>
        <div className="grid"> {gridItems}</div>
        <div className="button-class">
          <button type="button" className="btn btn-primary" onClick={() => this.handleClick(matrix)}>Solve</button>
          <button type="button" className="btn btn-danger" onClick={() => this.puzzle_grid_generator()}>Get New Sudoku</button>
        </div>
      </div>
    )
  }
}

export default App;
